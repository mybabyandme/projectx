// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  SUPER_ADMIN
  ORG_ADMIN
  DONOR_SPONSOR
  PROJECT_MANAGER
  MONITOR
  TEAM_MEMBER
  VIEWER
}

enum ProjectStatus {
  DRAFT
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ProjectMethodology {
  AGILE
  WATERFALL
  HYBRID
  KANBAN
  SCRUM
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ProjectTemplate {
  GOVERNMENT
  NGO
  CORPORATE
  AGILE
  WATERFALL
  CUSTOM
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  BLOCKED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
enum PhaseStatus {
  PLANNED
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ReportType {
  DAILY
  WEEKLY
  MONTHLY
  MILESTONE
  INCIDENT
}

enum ReportStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

// Core Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Organizations (Multi-tenancy)
model Organization {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  settings  Json?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  members  OrganizationMember[]
  projects Project[]

  @@map("organizations")
}

// Users with organization membership
model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  avatarUrl     String?   @map("avatar_url")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  accounts     Account[]
  sessions     Session[]
  memberships  OrganizationMember[]
  assignedTasks Task[]              @relation("TaskAssignee")
  createdTasks Task[]               @relation("TaskCreator")
  progressReports ProgressReport[]  @relation("ReportAuthor")
  approvedReports ProgressReport[]  @relation("ReportApprover")

  @@map("users")
}
// Organization membership with roles
model OrganizationMember {
  id             String   @id @default(uuid())
  organizationId String   @map("organization_id")
  userId         String   @map("user_id")
  role           UserRole
  permissions    Json?
  joinedAt       DateTime @default(now()) @map("joined_at")

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
  @@map("organization_members")
}

// Projects
model Project {
  id             String              @id @default(uuid())
  organizationId String              @map("organization_id")
  name           String
  description    String?             @db.Text
  methodology    ProjectMethodology
  status         ProjectStatus       @default(DRAFT)
  priority       ProjectPriority     @default(MEDIUM)
  budget         Decimal?            @db.Decimal(15, 2)
  currency       String?             @default("USD")
  startDate      DateTime?           @map("start_date")
  endDate        DateTime?           @map("end_date")
  template       ProjectTemplate?
  metadata       Json?
  settings       Json?
  createdAt      DateTime            @default(now()) @map("created_at")
  updatedAt      DateTime            @updatedAt @map("updated_at")

  // Relations
  organization    Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  phases          ProjectPhase[]
  tasks           Task[]
  budgets         ProjectBudget[]
  progressReports ProgressReport[]

  @@index([organizationId])
  @@index([status])
  @@map("projects")
}
// Project phases
model ProjectPhase {
  id          String      @id @default(uuid())
  projectId   String      @map("project_id")
  name        String
  description String?     @db.Text
  order       Int?        @default(0)
  startDate   DateTime?   @map("start_date")
  endDate     DateTime?   @map("end_date")
  budget      Decimal?    @db.Decimal(15, 2)
  status      PhaseStatus @default(PLANNED)
  metadata    Json?
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks   Task[]

  @@index([projectId])
  @@map("project_phases")
}

// Tasks with WBS support
model Task {
  id             String       @id @default(uuid())
  projectId      String       @map("project_id")
  phaseId        String?      @map("phase_id")
  parentId       String?      @map("parent_id")
  assigneeId     String?      @map("assignee_id")
  creatorId      String       @map("creator_id")
  wbsCode        String?      @map("wbs_code")
  title          String
  description    String?      @db.Text
  status         TaskStatus   @default(TODO)
  priority       TaskPriority @default(MEDIUM)
  estimatedHours Int?         @map("estimated_hours")
  actualHours    Int?         @map("actual_hours")
  startDate      DateTime?    @map("start_date")
  dueDate        DateTime?    @map("due_date")
  metadata       Json?
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  // Relations
  project  Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  phase    ProjectPhase? @relation(fields: [phaseId], references: [id])
  parent   Task?         @relation("TaskHierarchy", fields: [parentId], references: [id])
  subtasks Task[]        @relation("TaskHierarchy")
  assignee User?         @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creator  User          @relation("TaskCreator", fields: [creatorId], references: [id])

  @@index([projectId])
  @@index([phaseId])
  @@index([assigneeId])
  @@index([status])
  @@index([wbsCode])
  @@map("tasks")
}

// Financial tracking
model ProjectBudget {
  id               String   @id @default(uuid())
  projectId        String   @map("project_id")
  category         String
  allocatedAmount  Decimal  @map("allocated_amount") @db.Decimal(15, 2)
  spentAmount      Decimal  @default(0) @map("spent_amount") @db.Decimal(15, 2)
  approvedAmount   Decimal  @default(0) @map("approved_amount") @db.Decimal(15, 2)
  metadata         Json?
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@map("project_budgets")
}

// Progress reports
model ProgressReport {
  id          String       @id @default(uuid())
  projectId   String       @map("project_id")
  reporterId  String       @map("reporter_id")
  approverId  String?      @map("approved_by")
  reportType  ReportType
  status      ReportStatus @default(DRAFT)
  content     Json
  attachments Json?
  submittedAt DateTime?    @map("submitted_at")
  approvedAt  DateTime?    @map("approved_at")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  // Relations
  project  Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  reporter User    @relation("ReportAuthor", fields: [reporterId], references: [id])
  approver User?   @relation("ReportApprover", fields: [approverId], references: [id])

  @@index([projectId])
  @@index([reporterId])
  @@index([status])
  @@map("progress_reports")
}